<?php

namespace {{ projectName }}\Application\{{ entityName }}\Command;

use Sfynx\DddBundle\Layer\Application\Generalisation\Command\AbstractCommand;

/**
 * Class NewCommand.
 *
 * @category   {{ projectName }}
 * @package    Application
 * @subpackage Command
 */
class NewCommand extends AbstractCommand
{
{% for field in entityFields %}
{% if field.type!="id" %}
    /** @var {{ field.type }} ${{ field.name }} */
    protected ${{ field.name }};

{% endif %}
{% endfor %}
{% set constructorArgs = "" %}
{% for field in entityFields %}
{% if field.type != "id" %}
{% set var = '$' ~ field.name ~ ', '  %}
{% set constructorArgs = constructorArgs ~ var%}
{% endif %}
{% endfor %}
{% set constructorArgs = constructorArgs|trim(", ") %}
    /**
     * NewCommand constructor.
{% for field in entityFields %}{% if field.type != "id" %}
     * @param ${{ field.name }}
{% endif %}{% endfor %}
     */
    public function __construct({{ constructorArgs }})
    {
{% for field in entityFields %}{% if field.type != "id" %}
        $this->{{ field.name }} = ${{ field.name }};
{% endif %}{% endfor %}
    }
{% for field in entityFields %}{% if field.type != "id" %}

    /**
     * @return {{ field.type }}
     */
    public function get{{ field.name|ucfirst }}()
    {
        return $this->{{ field.name }};
    }

    /**
     * @param {{ field.type }}
     * @return $this
     */
    public function set{{ field.name|ucfirst }}(${{ field.name }})
    {
        $this->{{ field.name }} = ${{ field.name }};
        return $this;
    }
{% endif %}{% endfor %}
}

