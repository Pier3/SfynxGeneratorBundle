<?php

namespace {{ projectName }}\Application\{{ entityName|capitalize }}\Command;

use Sfynx\DddBundle\Layer\Application\Generalisation\Command\AbstractCommand;

/**
 * Class PatchCommand.
 *
 * @category   {{ projectName }}
 * @package    Application
 * @subpackage Command
 */
class PatchCommand extends AbstractCommand
{
{% for field in entityFields %}
    /** @var {{ field.type }} ${{ field.name }} */
    protected ${{ field.name }};

{% endfor %}
{% set constructorArgs = "" %}
{% for field in entityFields %}
{% set var = '$' ~ field.name ~ ', '  %}
{% set constructorArgs = constructorArgs ~ var%}
{% endfor %}
{% set constructorArgs = constructorArgs|trim(", ") %}
    /**
     * NewCommand constructor.
{% for field in entityFields %}
     * @param ${{ field.name }}
{% endfor %}
     */
    public function __construct({{ constructorArgs }})
    {
{% for field in entityFields %}
     $this->{{ field.name }} = ${{ field.name }};
{% endfor %}
    }
{% for field in  entityFields %}
{% if field.type == "id" or field.type == "IdVO" %}

    /**
     * Get the {{ field.name }} attribute value
     * @return {% if field.type == "id" %}int{% else %}string{% endif %}
     */
    public function get{{ field.name|ucfirst }}()
    {
        return $this->{{ field.name }};
    }

    /**
     * Set the {{ field.name|ucfirst }} attribute
     * @param {% if field.type == "id" %}int{% else %}string{% endif %} $value
     * @return $this
     */
    public function set{{ field.name|ucfirst }}($value)
    {
        $this->{{ field.name }} = $value;
        return $this;
    }
{% else %}
{% if field.type == "valueObject" %}
{% if valueObjects[field.voName]["name"] == field.voName %}
{% set namespace = valueObjects[field.voName]["type"]|split('\\') %}
{% set key = namespace|length - 1 %}
{% set namespace = namespace[key] %}
{% else %}
{% set namespace = "" %}
{% endif %}
{% else %}
{% set namespace = "" %}
{% endif %}

    /**
     * Get the {{ field.name }} attribute value
     * @return {{ field.type }} $value
     */
    public function get{{ field.name|ucfirst }}()
    {
        return $this->{{ field.name}};
    }

    /**
     * Set the {{ field.name }} attribute
     * @param {% if namespace %}{{ namespace }} {% endif %}{{ field.type }} $value
     * @return $this
     */
    public function set{{ field.name|ucfirst }}({% if namespace %}{{ namespace }} {% endif %}$value)
    {
        $this->{{ field.name }} = $value;
        return $this;
    }
{% endif %}
{% endfor %}
}