<?php
declare(strict_types = 1);

namespace {{ projectName }}\Domain\Service\{{ entityName }}\Factory\Odm;

use Sfynx\DddBundle\Layer\Infrastructure\Persistence\Generalisation\Odm\SaveRepository;

use Sfynx\DddBundle\Layer\Domain\Service\Generalisation\Factory\{
    RepositoryFactoryInterface,
    TraitRepositoryFactory
};

use {{ projectName }}\Infrastructure\Persistence\Repository\{{ entityName }}\Odm\{
    GetAllRepository,
    DeleteManyRepository,
    DeleteRepository,
    GetByIdsRepository,
    OneRepository,
    SearchByRepository
};
use {{ projectName }}\Domain\Repository\{{ entityName }}RepositoryInterface;

/**
 * Class RepositoryFactory for entity {{ entityName }} using Odm DBMS.
 *
 * @category {{ entityName }}
 * @package Domain
 * @subpackage Service\Odm
 */
class RepositoryFactory implements RepositoryFactoryInterface
{
    use TraitRepositoryFactory;

    /**
     * Build the repository depending on required action.
     *
     * @param string $action
     * @throws \Exception
     * @return {{ entityName }}RepositoryInterface
     */
    public function buildRepository(string $action): {{ entityName }}RepositoryInterface
    {
        switch ($action) {
            case RepositoryFactoryInterface::ONE_REPOSITORY:
                return new OneRepository($this->manager);
            case RepositoryFactoryInterface::SEARCHBY_REPOSITORY:
                return new SearchByRepository($this->manager);
            case RepositoryFactoryInterface::ALL_REPOSITORY:
                return new GetAllRepository($this->manager);
            case RepositoryFactoryInterface::GETBYIDS_REPOSITORY:
                return new GetByIdsRepository($this->manager);
            case RepositoryFactoryInterface::DELETEONE_REPOSITORY:
                return new DeleteRepository($this->manager);
            case RepositoryFactoryInterface::DELETEMANY_REPOSITORY:
                return new DeleteManyRepository($this->manager);
            case RepositoryFactoryInterface::NEW_REPOSITORY:
            case RepositoryFactoryInterface::UPDATE_REPOSITORY:
                return new SaveRepository($this->manager);
            default:
                throw new \Exception('Wrong key for repository');
        }
    }
}
