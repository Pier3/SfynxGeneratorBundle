<?php

namespace {{ projectName }}\Domain\Service\{{ entityName }}\Factory\Orm;


use Sfynx\DddBundle\Layer\Domain\Service\Generalisation\Factory\RepositoryFactoryInterface;
use Sfynx\DddBundle\Layer\Infrastructure\Persistence\Generalisation\Orm\SaveRepository;
use {{ projectName }}\Infrastructure\Persistence\Repository\{{ entityName }}\Orm\GetAllRepository;
use {{ projectName }}\Infrastructure\Persistence\Repository\{{ entityName }}\Orm\DeleteManyRepository;
use {{ projectName }}\Infrastructure\Persistence\Repository\{{ entityName }}\Orm\DeleteRepository;
use {{ projectName }}\Infrastructure\Persistence\Repository\{{ entityName }}\Orm\GetByIdsRepository;
use {{ projectName }}\Infrastructure\Persistence\Repository\{{ entityName }}\Orm\GetRepository;

class RepositoryFactory implements RepositoryFactoryInterface
{
    protected $em;

    public function __construct($em)
    {
        $this->em = $em;
    }

    public function buildRepository($action)
    {
        switch($action) {
            case RepositoryFactoryInterface::ONE_REPOSITORY :
            return new GetRepository($this->em);
            case RepositoryFactoryInterface::ALL_REPOSITORY :
            return new GetAllRepository($this->em);
            case RepositoryFactoryInterface::GETBYIDS_REPOSITORY :
            return new GetByIdsRepository($this->em);
            case RepositoryFactoryInterface::DELETEONE_REPOSITORY :
            return new DeleteRepository($this->em);
            case RepositoryFactoryInterface::DELETEMANY_REPOSITORY :
            return new DeleteManyRepository($this->em);
            case RepositoryFactoryInterface::NEW_REPOSITORY :
            case RepositoryFactoryInterface::UPDATE_REPOSITORY :
            return new SaveRepository($this->em);
            default :
            throw new \Exception('Wrong key for repository');
        }
    }
}