<?php

namespace {{ projectName }}\Domain\Workflow\{{ entityName }}\Listener;

use Sfynx\DddBundle\Layer\Domain\Generalisation\Observer\ObservableInterface;
use Sfynx\DddBundle\Layer\Domain\Generalisation\Observer\ObserverInterface;
use {{ projectName }}\Application\{{ entityName }}\Command\UpdateCommand;
use {{ projectName }}\Application\{{ entityName }}\Command\PatchCommand;
{% for data in valueObjects %}
use {{ projectName }}\Domain\ValueObject\{{ data.name }};
{% endfor %}

/**
 * Class WFGenerateVOListener
 *
 * @category {{ projectName }}
 * @package Domain
 * @subpackage Workflow\Listener
 *
 * TODO change all array with SqlQueue and test performance
 */
class WFGenerateVOListener implements ObserverInterface
{
{% for field in fields %}
    /** @var {% if field.type == "id" %}int{% elseif field.type == "IdVO" %}string{% else %}{{ field.type }}{% endif %} ${{ field.name }} */
    private ${{ field.name|lower }};

{% endfor %}
    /**
     * @param ObservableInterface $wfHandler
     */
    public function update(ObservableInterface $wfHandler)
    {
{% if fields is empty %}

{% else %}
        $this{% for field in fields %}->set{{ field.name|capitalize }}($wfHandler){% if loop.index < fields|length %}

            {% else %};{% endif %}{% endfor %}
{% endif %}
    }
{% for field in fields %}

    /**
     * @param ObservableInterface $wfHandler
     * @return $this
     */
    public function set{{ field.name|capitalize }}(ObservableInterface $wfHandler)
    {
{% if field.type=="id" %}
        if ($wfHandler->getCommand() instanceof UpdateCommand || $wfHandler->getCommand() instanceof PatchCommand) {
{% if field.voName is defined %}
            $wfHandler->data->{{ field.name }}[] = new {{ field.voName }}($wfHandler->getCommand()->get{{ field.name|ucfirst }}());
{% else %}
            $wfHandler->data->{{ field.name }}[] = $wfHandler->getCommand()->get{{ field.name|ucfirst }}();
{% endif %}
        }
{% elseif field.type == "valueObject" %}
{% set parameters = "" %}
{% for name, data in valueObjects %}
{% if name == field.voName %}
{% for vofield in data.fields %}
{% set parameters = parameters ~ "$wfHandler->getCommand()->get" ~ field.name|ucfirst ~"()['"~ vofield.name ~"'], " %}
{% endfor %}
{% endif %}
{% endfor %}
        $wfHandler->data->{{ field.name }}[] = new {{ field.voName }}({{ parameters|trim(', ') }});
{% else %}
        $wfHandler->data->{{ field.name }}[] = $wfHandler->getCommand()->get{{ field.name|ucfirst }}();
{% endif %}
        return $this;
    }
{% endfor %}
}
