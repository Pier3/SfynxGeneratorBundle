<?php

namespace {{ projectName }}\Domain\Workflow\{{ entityName }}\Listener;

use DddContext\Domain\Generalisation\Observer\ObservableInterface;
use DddContext\Domain\Generalisation\Observer\ObserverInterface;
use Sfynx\CircuitBreakerBundle\CircuitBreaker\CircuitBreaker;
use Sfynx\CurrencyBundle\Currency\Manager\CurrencyManager;

/**
 * Class WFGetCurrency
 * @package DemoApiContext\Domain\Workflow\Actor\Listener
 */
class WFGetCurrency implements ObserverInterface
{
    protected $manager;

    protected $circuitBreaker;

    const SERVICE_NAME = 'currency';

    public function __construct(CurrencyManager $manager, CircuitBreaker $circuitBreaker)
    {
        $this->manager = $manager;
        $this->circuitBreaker = $circuitBreaker;
    }

    public function update(ObservableInterface $wfHandler)
    {
        $this->getCurrency($wfHandler);
    }

    protected function getCurrency(ObservableInterface $wfHandler)
    {
        if ($this->circuitBreaker->isAvailable(self::SERVICE_NAME)) {
            try{
                $currency = $this->manager->getLatestRatioByCurrency('USD');
                $this->circuitBreaker->reportSuccess(self::SERVICE_NAME);
            } catch(\Exception $e) {
                // TODO get cache value when the api connection fails
                $this->circuitBreaker->reportFailure(self::SERVICE_NAME);
                $currency = null;
            }
            $wfHandler->data->currency = [];
            $wfHandler->data->currency[] = $currency;
        }
        // TODO get cache value when the api connection fails
    }
}
