<?php

namespace {{ projectName }}\Domain\Workflow\{{ entityName }}\Listener;

use Sfynx\DddBundle\Layer\Domain\Generalisation\Observer\ObservableInterface;
use Sfynx\DddBundle\Layer\Domain\Generalisation\Observer\ObserverInterface;
use Sfynx\DddBundle\Layer\Domain\Service\Generalisation\Manager\ManagerInterface;
use Sfynx\DddBundle\Layer\Infrastructure\Exception\DomainException;
use Sfynx\DddBundle\Layer\Infrastructure\Logger\Generalisation\TraitLogger;

/**
 * Class WFRetrieveEntity
 *
 * @category {{ projectName }}
 * @package Domain
 * @subpackage Workflow\Listener
 */
class WFRetrieveEntity implements ObserverInterface
{
    use TraitLogger;

    /** @var ManagerInterface $manager */
    protected $manager;

    /**
     * Constructor
     *
     * @param ManagerInterface $manager
     */
    public function __construct(ManagerInterface $manager)
    {
        $this->manager = $manager;
    }

    /**
     * Run all listener parts. Entry point of the listener.
     * @param ObservableInterface $wfHandler
     * @throws DomainException
     *
     * TODO change array with SqlQueue and test performance (end function have to be replace be the post method)
     */
    public function update(ObservableInterface $wfHandler)
    {
        $entityId = (string)end($wfHandler->data->entityId);
        if (null === $entityId) {
            throw new DomainException('Invalid Id.');
        }

        $entity = $this->manager->find($entityId);

{% for field in fields %}
        $wfHandler->data->{{ field.name }}[0] = (!empty(end($wfHandler->data->{{ field.name }})))
            ? end($wfHandler->data->{{ field.name }})
            : $entity->get{{ field.name|capitalize }}();
{% endfor %}

    }
}
