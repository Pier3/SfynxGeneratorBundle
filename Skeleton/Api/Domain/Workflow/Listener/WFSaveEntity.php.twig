<?php

namespace {{  projectName }}\Domain\Workflow\{{  entityName }}\Listener;

use Sfynx\DddBundle\Layer\Domain\Generalisation\Observer\ObservableInterface;
use Sfynx\DddBundle\Layer\Domain\Generalisation\Observer\ObserverInterface;
use Sfynx\DddBundle\Layer\Domain\Service\Generalisation\Manager\ManagerInterface;
use Sfynx\DddBundle\Layer\Infrastructure\Logger\Generalisation\TraitLogger;
use {{   projectName }}\Application\{{  entityName }}\Command\UpdateCommand;

/**
 * Class WFGenerateVOListener
 *
 * @package {{   projectName }}\Domain\Workflow\{{  entityName }}\Listener
 */
class WFSaveEntity implements ObserverInterface
{
    use TraitLogger;

    protected $manager;

    public function __construct(ManagerInterface $manager)
    {
        $this->manager = $manager;
    }

    /**
     * @param WFObjectEvent $event
     *
     * TODO change array with SqlQueue and test performance (end function have to be replace be the post method)
     */
    public function update(ObservableInterface $wfHandler)
    {
{% set ifString = "" %}
{% set paramsString = "" %}
{% for field in fields %}
        ${{ field.name }} = !empty($wfHandler->data->{{ field.name }}) ? end($wfHandler->data->{{ field.name }}) : null;
        {% if field.type == "valueObject" and field.type != "id" %}
            {% set ifString = ifString ~ "null == $" ~ field.name ~ "&&" %}
        {% endif %}
        {% set paramsString = paramsString ~ "$" ~ field.name ~ "," %}
{% endfor %}
        {% set ifString = ifString|trim("&&") %}
        {% if ifString != "" %}
        if ({{ ifString }}) {
            $message = 'Some value object have not been created';
            $this->logger->error($message);
            throw new \Exception($message);
        }
        {% endif %}

        if ($wfHandler->getCommand() instanceof UpdateCommand) {
            $entityId = !empty($wfHandler->data->entityId) ? end($wfHandler->data->entityId) : null;
            if (null === $entityId) {
                $message = 'Id Value Object not found';
                $this->logger->error($message);
                throw new \Exception($message);
            }
            $wfHandler->data->entity[] = $this->manager->update({{ paramsString|trim(',') }});
            return;
        }
        $wfHandler->data->entity[] = $this->manager->create({{ paramsString|trim(',') }});
    }
}
