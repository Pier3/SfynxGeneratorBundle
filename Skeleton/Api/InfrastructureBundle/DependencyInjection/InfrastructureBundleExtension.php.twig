<?php
declare(strict_types = 1);

namespace {{ projectName }}\InfrastructureBundle\DependencyInjection;

use Symfony\Component\Config\FileLocator;
use Symfony\Component\HttpKernel\DependencyInjection\Extension;

use Symfony\Component\DependencyInjection\{
    ContainerBuilder,
    Loader
};

/**
 * This is the class that loads and manages your bundle configuration
 *
 * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html}
 */
class {{ projectName }}InfrastructureBundleExtension extends Extension
{
    const CONFIG_DIR = realpath(__DIR__ . '/../Resources/config/');

    /**
     * Loads a specific configuration.
     *
     * @param array            $configs   An array of configuration values
     * @param ContainerBuilder $container A ContainerBuilder instance
     *
     * @throws \Exception
     */
    public function load(array $configs, ContainerBuilder $container)
    {
        $configuration = new Configuration();
        $config = $this->processConfiguration($configuration, $configs);

        $container->setParameter('database_type', $config['database_type']);
        $container->setParameter('database_multitenant_path_file', $config['database_multitenant_path_file']);

        //todo: Create the InfrastructureBundle/Resource/config/application with all elements to load them.
        //todo: ...then, remove the @noinspection tag.
        /** @noinspection PhpUnusedLocalVariableInspection */
        $loader = new Loader\YamlFileLoader($container, new FileLocator(self::CONFIG_DIR . 'application'));
        //$loader->load('monolog.yml');
        //$loader->load('listener.yml');
        //$loader->load('request.yml');
        //$loader->load('validator.yml');

        //$loader = new Loader\XmlFileLoader($container, new FileLocator(self::CONFIG_DIR . 'application'));
        //$loader->load('formtype.xml');
    }

    /**
    * @return string
    */
    public function getAlias(): string
    {
        return '{{ projectName|lower }}_infrastructure';
    }

    /**
    * @return string
    */
    public function getName(): string
    {
        return '{{ projectName|lower }}_infrastructure';
    }
}
