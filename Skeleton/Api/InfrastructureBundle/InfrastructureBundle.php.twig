<?php
declare(strict_types = 1);

namespace {{ projectName }}\InfrastructureBundle;

use {{ projectName }}\InfrastructureBundle\DependencyInjection\{{ projectName }}InfrastructureBundleExtension;

use {{ projectName }}\InfrastructureBundle\DependencyInjection\Compiler {
    CreateRepositoryFactoryPass,
    CreateDynamicConnectionPass
};

use Sfynx\DddBundle\Layer\Infrastructure\Persistence\Generalisation\MultipleDatabase;
use Symfony\Component\HttpKernel\Bundle\Bundle;
use Symfony\Component\DependencyInjection\ContainerBuilder;

use Doctrine\DBAL\Types as Orm;
use Doctrine\ODM\MongoDB\Types as Odm;
use Doctrine\ODM\CouchDB\Types as CouchDB;

class {{ projectName }}InfrastructureBundle extends Bundle
{
    /**
     * Return a new instance of {{ projectName }}InfrastructureBundleExtension.
     *
     * @return {{ projectName }}InfrastructureBundleExtension
     */
    public function getContainerExtension(): {{ projectName }}InfrastructureBundleExtension
    {
        return new {{ projectName }}InfrastructureBundleExtension();
    }

    public function boot()
    {
        switch ($this->container->getParameter('database.driver')) {
            default:
            case MultipleDatabase::ORM_DATABASE_TYPE:
                $this->loadOrmTypes();
                break;
            case MultipleDatabase::ODM_DATABASE_TYPE:
                $this->loadOdmTypes();
                break;
            case MultipleDatabase::COUCHDB_DATABASE_TYPE:
                $this->loadCouchDbTypes();
                break;
        }
    }

    /**
     * Builds the bundle.
     * It is only ever called once when the cache is empty.
     * This method can be overridden to register compilation passes or other extensions which is the case here.
     *
     * @param ContainerBuilder $container A ContainerBuilder instance
     */
    public function build(ContainerBuilder $container)
    {
        parent::build($container);

        $container->addCompilerPass(new CreateRepositoryFactoryPass());
        $container->addCompilerPass(new CreateDynamicConnectionPass());
    }

    /**
     * Load the Orm database types.
     * @throws \Exception
     */
    protected function loadOrmTypes()
    {
        $em = $this->container->get('doctrine.orm.entity_manager');

        if (!Orm\Type::hasType('IdVO')) {
            Orm\Type::addType('IdVO', 'Sfynx\DddBundle\Layer\Infrastructure\EntityType\Orm\IdType');
            $em->getConnection()->getDatabasePlatform()->registerDoctrineTypeMapping('IdVO', 'IdVO');
        }
{% for name,data in valueObjects %}

        if (!Orm\Type::hasType('{{ name }}')) {
            Orm\Type::addType('{{ name }}', '{{ projectName }}\Infrastructure\EntityType\Orm\{{ name }}Type');
            $em->getConnection()->getDatabasePlatform()->registerDoctrineTypeMapping('{{ name }}', '{{ name }}');
        }
{% endfor %}
    }

    /**
     * Load the Odm database types.
     * @throws \Exception
     */
    protected function loadOdmTypes()
    {
        $em = $this->container->get('doctrine_mongodb.odm.default_document_manager');

        if (!Odm\Type::hasType('IdVO')) {
            Odm\Type::addType('IdVO', 'Sfynx\DddBundle\Layer\Infrastructure\EntityType\Odm\IdType');
            $em->getConnection()->getDatabasePlatform()->registerDoctrineTypeMapping('IdVO', 'IdVO');
        }
{% for name,data in valueObjects %}

        if (!Odm\Type::hasType('{{ name }}')) {
            Odm\Type::addType('{{ name }}', '{{ projectName }}\Infrastructure\EntityType\Odm\{{ name }}Type');
            $em->getConnection()->getDatabasePlatform()->registerDoctrineTypeMapping('{{ name }}', '{{ name }}');
        }
{% endfor %}
    }

    /**
     * Load the CouchDB database types.
     * @throws \Exception
     */
    protected function loadCouchDBTypes()
    {
        $em = $this->container->get('doctrine_couchdb.odm.default_document_manager');

        if (!CouchDB\Type::hasType('IdVO')) {
            CouchDB\Type::addType('IdVO', 'Sfynx\DddBundle\Layer\Infrastructure\EntityType\CouchDB\IdType');
            $em->getConnection()->getDatabasePlatform()->registerDoctrineTypeMapping('IdVO', 'IdVO');
        }
{% for name,data in valueObjects %}

        if (!CouchDB\Type::hasType('{{ name }}')) {
            CouchDB\Type::addType('{{ name }}', '{{ projectName }}\Infrastructure\EntityType\CouchDB\{{ name }}Type');
            $em->getConnection()->getDatabasePlatform()->registerDoctrineTypeMapping('{{ name }}', '{{ name }}');
        }
{% endfor %}
    }
}
