{% for commandQueryResponsibilitySegregation in controllerData %}
    /** @var {{ commandQueryResponsibilitySegregation.action|ucfirst }}{{ group }}Handler */
    protected ${{ commandQueryResponsibilitySegregation.action }}{{ group }}Handler;

{% endfor %}
    /**
     * Controller constructor.
     *
     * @param RequestInterface         $request
     * @param ResolverInterface        $resolver
     * @param ResponseHandlerInterface $responseHandler
{% for commandQueryResponsibilitySegregation in controllerData %}
     * @param {{ group }}HandlerInterface  ${{ commandQueryResponsibilitySegregation.action }}{{ group }}Handler
{% endfor %}
     */
    public function __construct(
        RequestInterface $request,
        ResolverInterface $resolver,
        ResponseHandlerInterface $responseHandler,
{% for commandQueryResponsibilitySegregation in controllerData %}
        {{ group }}HandlerInterface ${{ commandQueryResponsibilitySegregation.action }}{{ group }}Handler{% if not loop.last %},
{% else %}

{% endif %}
{% endfor %}
    ) {
        $this->request = $request;
        $this->resolver = $resolver;
        $this->responseHandler = $responseHandler;
{% for commandQueryResponsibilitySegregation in controllerData %}
        $this->{{ commandQueryResponsibilitySegregation.action }}{{ group }}Handler = ${{ commandQueryResponsibilitySegregation.action }}{{ group }}Handler;
{% endfor %}
    }
{% for commandQueryResponsibilitySegregation in controllerData %}

{% include('actions/' ~ commandQueryResponsibilitySegregation.action ~ '.php.twig') with {'action': commandQueryResponsibilitySegregation.action} %}
{% endfor %}
