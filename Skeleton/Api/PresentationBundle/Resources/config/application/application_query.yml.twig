parameters:
    ###################
    # DATABASE SYSTEM #
    ###################

    project.{{ projectName|lower }}.{{ entityName|lower }}.orm.repository.factory.class: {{ projectName|capitalize }}Context\Domain\Service\{{ entityName|capitalize }}\Factory\Orm\RepositoryFactory
    project.{{ projectName|lower }}.{{ entityName|lower }}.odm.repository.factory.class: {{ projectName|capitalize }}Context\Domain\Service\{{ entityName|capitalize }}\Factory\Odm\RepositoryFactory
    project.{{ projectName|lower }}.{{ entityName|lower }}.couchdb.repository.factory.class: {{ projectName|capitalize }}Context\Domain\Service\{{ entityName|capitalize }}\Factory\CouchDB\RepositoryFactory

    ###################
    #      MANAGER    #
    ###################

    project.{{ projectName|lower }}.{{ entityName|lower }}.manager.{{ group|lower }}.class: {{ projectName|capitalize }}Context\Domain\Service\{{ entityName|capitalize }}\Manager\{{ group }}\Manager

    #################
    # QUERY HANDLER #
    #################
{% for commandQueryResponsibilitySegregation in controllerData %}
    project.{{ projectName|lower }}.{{ entityName|lower }}.{{ group|lower }}.{{ commandQueryResponsibilitySegregation.action|lower }}.handler.class: {{ projectName|capitalize }}Context\Application\{{ entityName|capitalize }}\{{ group }}\Handler\{{ commandQueryResponsibilitySegregation.action }}{{ group }}Handle
{% if loop.last %}

{% endif %}
{% endfor %}
services:
    ###################
    # MANAGER HANDLER #
    ###################

    #
    # manager Configuration
    # project.{{ projectName|lower }}.{{ entityName|lower }}.repository.factory service is created by CreateRepositoryFactoryPass
    #
    project.{{ projectName|lower }}.{{ entityName|lower }}.query.manager:
        class: %project.{{ projectName|lower }}.{{ entityName|lower }}.manager.{{ group }}.class%
        arguments:
            - "@project.{{ projectName|lower }}.{{ entityName|lower }}.repository.factory"
        calls:
            - [setLogger, ["@project.dddcontext.logger.domain"]]
            - [addProcess, ["prepersist_create", "@project.{{ projectName|lower }}.{{ entityName|lower }}.new.prepersist.process"]]
            - [addProcess, ["postpersist_create", "@project.{{ projectName|lower }}.{{ entityName|lower }}.new.postpersist.process"]]
            - [addProcess, ["prepersist_update", "@project.{{ projectName|lower }}.{{ entityName|lower }}.new.prepersist.process"]]
            - [addProcess, ["postpersist_update", "@project.{{ projectName|lower }}.{{ entityName|lower }}.new.postpersist.process"]]

    #################
    # QUERY HANDLER #
    #################
{% for commandQueryResponsibilitySegregation in controllerData %}

    #
    # {{ commandQueryResponsibilitySegregation.action|lower }} {{ entityName|lower }} {{ group }} handler
    #
    project.{{ projectName|lower }}.{{ entityName|lower }}.{{ group|lower }}.{{ commandQueryResponsibilitySegregation.action|lower }}.handler:
        class: %project.{{ projectName|lower }}.{{ entityName|lower }}.{{ group|lower }}.{{ commandQueryResponsibilitySegregation.action|lower }}.handler.class%
        arguments: ["@project.{{ projectName|lower }}.{{ entityName|lower }}.{{ group|lower }}.manager"]
{% if loop.last %}

{% endif %}
{% endfor %}
    #################
    # PROCESS #
    #################

    #
    # Example of listener on {{ entityName|lower }}.pre.new event
    #
    project.{{ projectName|lower }}.{{ entityName|lower }}.new.prepersist.process:
        class: {{ projectName|capitalize }}Context\Domain\Service\{{ entityName|capitalize }}\Processor\PrePersistProcess
        calls:
            - [setLogger, ["@project.dddcontext.logger.domain"]]
    #
    # Example of listener on {{ entityName|lower }}.post.new event
    #
    project.{{ projectName|lower }}.{{ entityName|lower }}.new.postpersist.process:
        class: {{ projectName|capitalize }}Context\Domain\Service\{{ entityName|capitalize }}\Processor\PostPersistProcess
        calls:
            - [setLogger, ["@project.dddcontext.logger.domain"]]
