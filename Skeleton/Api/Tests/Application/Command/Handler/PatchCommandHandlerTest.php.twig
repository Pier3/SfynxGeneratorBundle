<?php
declare(strict_types = 1);

namespace Tests\Application\{{ entityName }}\Command\Handler;

use Sfynx\DddBundle\Layer\Application\Generalisation\Interfaces\CommandHandlerInterface;
use {{ projectName }}\Application\{{ entityName }}\Command\Handler\PatchCommandHandler;
use {{ projectName }}\Application\{{ entityName }}\Command\PatchCommand;
use {{ projectName }}\Domain\Workflow\{{ entityName }}\Handler\PatchWFHandler;
use \Phake;

/**
 * Class PatcheCommandHandlerTest.
 * This class permits to test the PatchCommandHandler class.
 *
 * @category {{ projectName }}
 * @package Test
 * @subpackage Application\Command\Handler
 */
class PatchCommandHandlerTest extends \PHPUnit_Framework_TestCase
{
    protected $workflowHandler;

    /** @var PatchCommandHandler */
    protected $commandHandler;

    protected $command;

    /**
     * Configure the tests.
     */
    public function setUp()
    {
        $this->command = Phake::mock(PatchCommand::class);
        $this->workflowHandler = Phake::mock(PatchWFHandler::class);
        $this->workflowHandler->data = new \stdClass();

        $this->commandHandler = new PatchCommandHandler($this->workflowHandler);
    }

    /**
     * Verify that commandHandler implements CommandHandlerInterface.
     */
    public function testInterfaces()
    {
        $this->assertInstanceOf(CommandHandlerInterface::class, $this->commandHandler);
    }

    /**
     * Verify the testProcess function.
     */
    public function testProcess()
    {
        $entity = [['id' => '123465']];
        $this->workflowHandler->data->entity = $entity;

        $result = $this->commandHandler->process($this->command);

        $this->assertEquals(end($entity), $result);
        Phake::verify($this->workflowHandler, Phake::times(1))->process(Phake::anyParameters());
    }

    /**
     * @expectedException \Sfynx\DddBundle\Layer\Infrastructure\Exception\WorkflowException
     */
    public function testException()
    {
        //This line force to run an exception.
        $this->workflowHandler->data->entity = [];

        $result = $this->commandHandler->process($this->command);
    }
}
