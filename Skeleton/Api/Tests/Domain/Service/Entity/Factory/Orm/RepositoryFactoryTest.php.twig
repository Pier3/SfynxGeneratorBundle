<?php

namespace Tests\Domain\Service\Country\Factory\Orm;


use DemoCountry\Domain\Service\Country\Factory\Orm\RepositoryFactory;
use DemoCountry\Domain\Service\Country\Manager\CountryManager;
use DemoCountry\Infrastructure\Persistence\Repository\Country\CouchDB\DeleteManyRepository;
use DemoCountry\Infrastructure\Persistence\Repository\Country\Orm\DeleteRepository;
use DemoCountry\Infrastructure\Persistence\Repository\Country\Orm\GetAllRepository;
use DemoCountry\Infrastructure\Persistence\Repository\Country\Orm\GetByIdsRepository;
use DemoCountry\Infrastructure\Persistence\Repository\Country\Orm\GetRepository;
use DemoCountry\Infrastructure\Persistence\Repository\Country\Orm\SearchByRepository;
use Phake;
use Sfynx\DddBundle\Layer\Domain\Service\Generalisation\Factory\RepositoryFactoryInterface;
use Sfynx\DddBundle\Layer\Infrastructure\Persistence\Generalisation\Odm\SaveRepository;


class RepositoryFactoryTest extends  \PHPUnit_Framework_TestCase
{

    public function setUp() {
        $this->manager = Phake::mock(CountryManager::class);
        $this->repositoryFactory = new RepositoryFactory($this->manager);
    }

    public function testBuildRepository()
    {
        $this->assertInstanceOf(GetAllRepository::class,$this->repositoryFactory->buildRepository(RepositoryFactoryInterface::ALL_REPOSITORY));
        $this->assertInstanceOf(GetRepository::class,$this->repositoryFactory->buildRepository(RepositoryFactoryInterface::ONE_REPOSITORY));
        $this->assertInstanceOf(SearchByRepository::class,$this->repositoryFactory->buildRepository(RepositoryFactoryInterface::SEARCHBY_REPOSITORY));
        $this->assertInstanceOf(GetByIdsRepository::class,$this->repositoryFactory->buildRepository(RepositoryFactoryInterface::GETBYIDS_REPOSITORY));
        $this->assertInstanceOf(DeleteRepository::class,$this->repositoryFactory->buildRepository(RepositoryFactoryInterface::DELETEONE_REPOSITORY));
        //$this->assertInstanceOf(DeleteManyRepository::class,$this->repositoryFactory->buildRepository(RepositoryFactoryInterface::DELETEMANY_REPOSITORY));
        $this->assertInstanceOf(SaveRepository::class,$this->repositoryFactory->buildRepository(RepositoryFactoryInterface::NEW_REPOSITORY));
        $this->assertInstanceOf(SaveRepository::class,$this->repositoryFactory->buildRepository(RepositoryFactoryInterface::UPDATE_REPOSITORY));
    }
}
