<?php
declare(strict_types = 1);

namespace Tests\Domain\Service\Manager;

use {{ projectName }}\Domain\Entity\{{ entityName }};
use {{ projectName }}\Domain\Service\{{ entityName }}\Manager\{{ entityName|ucfirst }}Manager;
use {{ projectName }}\Infrastructure\Persistence\Repository\{{ entityName }}\Orm\GetRepository;
use {{ projectName }}\Domain\Service\{{ entityName }}\Processor\PrePersistProcess;
use Phake;
use Sfynx\DddBundle\Layer\Domain\Service\Generalisation\Factory\RepositoryFactoryInterface;
use Sfynx\DddBundle\Layer\Domain\ValueObject\IdVO;
use Sfynx\DddBundle\Layer\Infrastructure\Logger\Logger;
use Sfynx\DddBundle\Layer\Infrastructure\Persistence\Generalisation\CouchDB\SaveRepository;
{% set args = "" %}
{% for field in entityFields %}
{% if field.type != "id" %}
{% if field.type == "number" %}
{% set args = args ~ "123, "  %}
{% else %}
{% if field.type == "boolean" %}
{% set args = args ~ "true, "  %}
{% else %}
{% set args = args ~ "'abc', "  %}
{% endif %}
{% endif %}
{% endif %}
{% endfor %}

/**
 * Class {{ entityName }}ManagerTest.
 * This class permits to test the {{ entityName }}Manager class.
 *
 * @category {{ projectName }}
 * @package Test
 * @subpackage Service\Manager
 */
class {{ entityName }}ManagerTest extends \PHPUnit_Framework_TestCase
{
    /** @var {{ entityName }}Manager */
    protected $manager;

    protected $repository;

    protected $saveRepository;

    protected $getOneRepository;

    protected $entity;

    /**
     * Configure tests.
     */
    public function setUp()
    {
        $this->repository = Phake::mock(RepositoryFactoryInterface::class);
        $this->saveRepository = Phake::mock(SaveRepository::class);
        $this->getOneRepository = Phake::mock(GetRepository::class);
        $this->entity = Phake::mock({{ entityName }}::class);
        $logger = Phake::mock(Logger::class);

        $this->manager = new {{ entityName }}Manager($this->repository);
        $this->manager->setLogger($logger);

        $processor = Phake::mock(PrePersistProcess::class);

        $this->manager->addProcess('prepersist_create', $processor);
        $this->manager->addProcess('postpersist_create', $processor);
        $this->manager->addProcess('prepersist_update', $processor);
        $this->manager->addProcess('postpersist_update', $processor);

        Phake::when($this->repository)->buildRepository(Phake::anyParameters())->thenReturn($this->saveRepository);
        Phake::when($this->saveRepository)->execute(Phake::anyParameters())->thenReturn($this->entity);
        Phake::when($this->repository)->create(Phake::anyParameters())->thenReturn(null);
    }

    /**
     * Test the create function.
     */
    public function testCreate()
    {
        if (!isset($_SERVER['HTTP_X_TENANT_ID'])) {
            $_SERVER['HTTP_X_TENANT_ID'] = '1000';
            $this->manager->create(null, {{ args|trim(', ') }});
            Phake::verify($this->repository)->buildRepository(RepositoryFactoryInterface::NEW_REPOSITORY);
        }
    }

    /**
     * Test the update function.
     */
    public function testUpdate()
    {
        $this->manager->update(new IdVO(), {{ args|trim(', ') }});
        Phake::verify($this->repository)->buildRepository(RepositoryFactoryInterface::UPDATE_REPOSITORY);
    }
}
