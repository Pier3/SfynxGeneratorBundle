<?php

namespace Tests\Presentation\Coordination\{{ entityName }}\Command;

use {{ projectName}}\Application\{{ entityName }}\Command\Handler\NewCommandHandler;
use {{ projectName}}\Application\{{ entityName }}\Command\Handler\PatchCommandHandler;
use {{ projectName}}\Application\{{ entityName }}\Command\Handler\UpdateCommandHandler;
use {{ projectName}}\Application\{{ entityName }}\Command\Handler\DeleteCommandHandler;
use {{ projectName}}\Application\{{ entityName }}\Command\Handler\DeleteManyCommandHandler;
use {{ projectName}}\Domain\Entity\{{ entityName }};
use {{ projectName}}\Presentation\Adapter\{{ entityName }}\Command\DeleteCommandAdapter;
use {{ projectName}}\Presentation\Adapter\{{ entityName }}\Command\NewCommandAdapter;
use {{ projectName}}\Presentation\Adapter\{{ entityName }}\Command\PatchCommandAdapter;
use {{ projectName}}\Presentation\Adapter\{{ entityName }}\Command\UpdateCommandAdapter;
use {{ projectName}}\Presentation\Coordination\{{ entityName }}\Command\Controller;
use {{ projectName}}\Presentation\Request\{{ entityName }}\Command\PatchRequest;
use {{ projectName}}\Presentation\Request\{{ entityName }}\Command\UpdateRequest;
use {{ projectName}}\Presentation\Request\{{ entityName }}\Command\DeleteRequest;
use {{ projectName}}\Presentation\Request\{{ entityName }}\Command\NewRequest;
use \Phake;
use Sfynx\DddBundle\Layer\Presentation\Request\Generalisation\Request\SymfonyStrategy;
use Sfynx\DddBundle\Layer\Presentation\Request\Generalisation\Resolver\ResolverStrategy;
use Sfynx\DddBundle\Layer\Presentation\Response\Handler\ResponseHandler;
use Symfony\Component\HttpFoundation\Response;


class ControllerTest extends \PHPUnit_Framework_TestCase
{

    public function setUp()
    {
        $this->request = Phake::mock(SymfonyStrategy::class);
        $this->resolver = Phake::mock(ResolverStrategy::class);
        $this->responseHandler = Phake::mock(ResponseHandler::class);

        $this->entity = ["id" => "00c1ab20-6e1e-4c54-83b4-62e677aba7ec"];

        Phake::when($this->responseHandler)->create(Phake::anyParameters())->thenReturn($this->responseHandler);
        Phake::when($this->responseHandler)->getResponse(Phake::anyParameters())->thenReturn(Phake::mock(Response::class));
        Phake::when($this->request)->getContent(Phake::anyParameters())->thenReturn(json_encode(["id"=>123456]));

{% set controllerArgs ="" %}
{% for commandQueryResponsibilitySegregation in controllerData %}
{% if  commandQueryResponsibilitySegregation.group == group %}

        $this->{{ commandQueryResponsibilitySegregation.action }}Handler = Phake::mock({{ commandQueryResponsibilitySegregation.action }}{{ group }}Handler::class);;
        Phake::when($this->{{ commandQueryResponsibilitySegregation.action }}Handler)->process(Phake::anyParameters())->thenReturn($this->entity);
{% set controllerArgs = controllerArgs  ~ "$this->" ~ commandQueryResponsibilitySegregation.action ~ "Handler, "%}
{% endif %}
{% endfor %}

        $this->controller = new Controller($this->request, $this->resolver, $this->responseHandler, {{ controllerArgs|trim(", ") }});
    }

{% for commandQueryResponsibilitySegregation in controllerData %}
{% if  commandQueryResponsibilitySegregation.group == group %}
    {% include('actions/' ~ commandQueryResponsibilitySegregation.action ~ '.php.twig') with {'action': commandQueryResponsibilitySegregation.action} %}
{% endif %}
{% endfor %}

    }
}
